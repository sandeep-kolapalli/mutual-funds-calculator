{"version":3,"sources":["services/index.js","components/header/index.js","components/calculation-inputs/index.js","components/calculation-outputs/index.js","components/returns-calculator/index.js","components/main/index.js","components/app/index.js","serviceWorker.js","index.js"],"names":["axios","require","module","exports","getTrailingReturns","schemeNumber","horizon","periodOfInterest","url","window","location","host","get","timeout","then","response","data","catch","err","index","className","CalculationInputs","props","state","periodOfInvestmemt","handleSchemeNumberChange","event","setState","target","value","handleHorizonChange","handlePeriodOfInvestmentChange","type","placeholder","min","this","onChange","disabled","loaderInProgress","onClick","Component","CalculationOutputs","calculatedReturns","length","schemeName","colSpan","style","fontSize","map","item","key","month","startNav","endNav","returns","startsWith","ReturnsCalculator","showLoader","periodOfInvestment","console","log","status","errorMessage","Object","keys","includes","errors","forEach","error","showNotification","message","store","addNotification","title","insert","container","animationIn","animationOut","dismiss","duration","onScreen","visible","Main","App","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ea3130e3.chunk.js","sourcesContent":["const axios = require('axios')\r\n\r\nconst getTrailingReturns = (schemeNumber, horizon, periodOfInterest) => {\r\n  const url = `http://${window.location.host}/api/getTrailingReturns/${schemeNumber}/${horizon}/${periodOfInterest}`\r\n  return axios.get(url, { timeout: 500000 })\r\n    .then(response => {\r\n      return response.data\r\n    })\r\n    .catch(err => {\r\n      return err.response.data\r\n    })\r\n}\r\n\r\nmodule.exports = { getTrailingReturns }\n","import React from 'react'\r\nimport './styles.css'\r\n\r\nexport default function index () {\r\n  return (\r\n    <div className='header'>\r\n      <span className='title'>MUTUAL FUND RETURNS CALCULATOR</span>\r\n    </div>\r\n  )\r\n}\n","import React, { Component } from 'react'\r\nimport './styles.css'\r\n\r\nexport default class CalculationInputs extends Component {\r\n  constructor (props) {\r\n    super(props)\r\n\r\n    this.state = {\r\n      schemeNumber: '',\r\n      horizon: '',\r\n      periodOfInvestmemt: ''\r\n    }\r\n\r\n    this.handleSchemeNumberChange = (event) => {\r\n      this.setState({\r\n        schemeNumber: event.target.value\r\n      })\r\n    }\r\n\r\n    this.handleHorizonChange = (event) => {\r\n      this.setState({\r\n        horizon: event.target.value\r\n      })\r\n    }\r\n\r\n    this.handlePeriodOfInvestmentChange = (event) => {\r\n      this.setState({\r\n        periodOfInvestmemt: event.target.value\r\n      })\r\n    }\r\n  }\r\n\r\n  render () {\r\n    return (\r\n      <div className='calculation-input-group'>\r\n        <span className='calculation-input-sub-group'>\r\n          <label className='calculation-input-sub-group-header'>Scheme Number<span className='mandatory-star'>*</span></label>\r\n          <input\r\n            type='number'\r\n            className='form-control txt-input'\r\n            placeholder='e.g. 101551'\r\n            min={0}\r\n            value={this.state.schemeNumber}\r\n            onChange={this.handleSchemeNumberChange}\r\n          />\r\n        </span>\r\n        <span className='calculation-input-sub-group'>\r\n          <label className='calculation-input-sub-group-header'>Horizon (in years)<span className='mandatory-star'>*</span></label>\r\n          <input\r\n            type='number'\r\n            className='form-control txt-input'\r\n            placeholder='min. 1 year'\r\n            min={1}\r\n            value={this.state.horizon}\r\n            onChange={this.handleHorizonChange}\r\n          />\r\n        </span>\r\n        <span className='calculation-input-sub-group'>\r\n          <label className='calculation-input-sub-group-header'>Period of Investment (in years)<span className='mandatory-star'>*</span></label>\r\n          <input\r\n            type='number'\r\n            className='form-control txt-input'\r\n            placeholder='min. 1 year'\r\n            min={1}\r\n            value={this.state.periodOfInvestmemt}\r\n            onChange={this.handlePeriodOfInvestmentChange}\r\n          />\r\n        </span>\r\n        <span className='calculation-input-sub-group'>\r\n          <button\r\n            className='btn btn-primary btn-calulate'\r\n            disabled={this.state.schemeNumber === '' || this.state.horizon === '' || this.state.periodOfInvestmemt === '' || this.props.loaderInProgress}\r\n            onClick={() => this.props.getTrailingReturns(this.state.schemeNumber, this.state.horizon, this.state.periodOfInvestmemt)}\r\n          >\r\n                        Calculate Trailing Returns\r\n          </button>\r\n        </span>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","import React from 'react'\r\nimport './styles.css'\r\n\r\nexport default function CalculationOutputs (props) {\r\n  return (\r\n    <div className='calculation-outputs'>\r\n      {\r\n        props.calculatedReturns.length !== 0 &&\r\n                props.schemeName !== '' &&\r\n                  <div>\r\n                    <p className='scheme-name'><b>Scheme Name: </b>{props.schemeName}</p>\r\n                    <p className='nav-note'><u>Note</u>: Start and End dates are specified as per the latest Net Asset Value (NAV) available in the period of investment</p>\r\n                  </div>\r\n      }\r\n      <table className='table-calculated-returns'>\r\n        <thead>\r\n          <tr>\r\n            <th>MONTH</th>\r\n            <th>START NAV</th>\r\n            <th>END NAV</th>\r\n            <th>RETURNS</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {\r\n            props.calculatedReturns.length === 0 &&\r\n              <tr><td colSpan='4' style={{ fontSize: 12 }}>-- No Data --</td></tr>\r\n          }\r\n          {\r\n            props.calculatedReturns.map(item =>\r\n              <tr key={item.month}>\r\n                <td>{item.month}</td>\r\n                <td>{item.startNav}</td>\r\n                <td>{item.endNav}</td>\r\n                <td>\r\n                  <i className={`fa fa-arrow-up ${item.returns.startsWith('-') ? 'returns-fall' : null}`} />&nbsp;&nbsp;\r\n                  {item.returns}\r\n                </td>\r\n              </tr>\r\n            )\r\n          }\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n  )\r\n}\r\n","import React, { Component } from 'react'\r\nimport './styles.css'\r\nimport '../../../node_modules/react-notifications-component/dist/theme.css'\r\nimport { getTrailingReturns } from '../../services'\r\nimport CalculationInputs from '../calculation-inputs'\r\nimport CalculationOutputs from '../calculation-outputs'\r\nimport { store } from 'react-notifications-component'\r\nimport Loader from 'react-loader-spinner'\r\n\r\nexport default class ReturnsCalculator extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n\r\n    this.state = {\r\n      schemeName: '',\r\n      calculatedReturns: [],\r\n      showLoader: false\r\n    }\r\n\r\n    this.getTrailingReturns = (schemeNumber, horizon, periodOfInvestment) => {\r\n      this.setState({\r\n        showLoader: true\r\n      }, () => {\r\n        console.log('this.state.showLoader', this.state.showLoader)\r\n        getTrailingReturns(schemeNumber, horizon, periodOfInvestment)\r\n          .then(response => {\r\n            if (response.status === 'SUCCESS') {\r\n              this.setState({\r\n                schemeName: response.schemeName,\r\n                calculatedReturns: response.calculatedReturns,\r\n                showLoader: false\r\n              })\r\n            } else {\r\n              // Fetch failed\r\n              console.log('Failed to fetch returns: ', response.errorMessage)\r\n              this.setState({\r\n                calculatedReturns: [],\r\n                showLoader: false\r\n              })\r\n\r\n              if (Object.keys(response).includes('errors')) {\r\n                response.errors.forEach(error => {\r\n                  this.showNotification('danger', error, 5000)\r\n                })\r\n              } else {\r\n                this.showNotification('danger', response.errorMessage, 5000)\r\n              }\r\n            }\r\n          })\r\n      })\r\n    }\r\n\r\n    this.showNotification = (type, message, timeout = 2000) => {\r\n      store.addNotification({\r\n        title: '',\r\n        message: message,\r\n        type: type,\r\n        insert: 'center',\r\n        container: 'center',\r\n        animationIn: ['animated', 'fadeIn'],\r\n        animationOut: ['animated', 'fadeOut'],\r\n        dismiss: {\r\n          duration: timeout,\r\n          onScreen: false\r\n        }\r\n      })\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className='returns-calculator'>\r\n        <Loader\r\n          type=\"ThreeDots\"\r\n          className='loader-spinner'\r\n          visible={this.state.showLoader}\r\n        />\r\n        <CalculationInputs getTrailingReturns={this.getTrailingReturns} loaderInProgress={this.state.showLoader} />\r\n        <CalculationOutputs schemeName={this.state.schemeName} calculatedReturns={this.state.calculatedReturns} />\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","import React, { Component } from 'react'\r\nimport Header from '../header'\r\nimport ReturnsCalculator from '../returns-calculator'\r\nimport './styles.css'\r\nimport '../../../node_modules/bootstrap/dist/css/bootstrap.min.css'\r\nimport '../../../node_modules/font-awesome/css/font-awesome.css'\r\nimport ReactNotification from 'react-notifications-component'\r\n\r\nexport default class Main extends Component {\r\n  render () {\r\n    return (\r\n      <div className='main'>\r\n        <ReactNotification />\r\n        <Header />\r\n        <ReturnsCalculator />\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","import React from 'react'\nimport './App.css'\nimport Main from '../main'\n\nfunction App () {\n  return (\n    <div className='App'>\n      <Main />\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\nexport function register (config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW (swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker (swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister () {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister()\n      })\n      .catch(error => {\n        console.error(error.message)\n      })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './components/app'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}